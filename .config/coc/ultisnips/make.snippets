snippet PYTHON_DEFAULT
.ONESHELL:
ENV_PREFIX=$(shell python -c "if __import__('pathlib').Path('.venv/bin/pip').exists(): print('.venv/bin/')")
USING_POETRY=$(shell grep "tool.poetry" pyproject.toml && echo "yes")

.PHONY: help
help:             ## Show the help.
	@echo "Usage: make <target>"
	@echo ""
	@echo "Targets:"
	@fgrep "##" Makefile | fgrep -v fgrep
endsnippet

snippet PYTHONE_INSTALL
.PHONY: install
install:          ## Install the project in dev mode.
	@if [ "$(USING_POETRY)" ]; then poetry install && exit; fi
	@echo "Don't forget to run 'make virtualenv' if you got errors."
	$(ENV_PREFIX)pip install -e .[test]
endsnippet

snippet PYTHON_FORMAT
.PHONY: fmt
fmt:              ## Format code using black & isort.
	$(ENV_PREFIX)isort ${1:dir}/
	$(ENV_PREFIX)black -l 79 i${1:dir}/
	$(ENV_PREFIX)black -l 79 tests/
endsnippet


snippet PYTHON_LINT
.PHONY: lint
lint:             ## Run pep8, black, mypy linters.
	$(ENV_PREFIX)flake8 ${1:dir}/
	$(ENV_PREFIX)black -l 79 --check ${1:dir}/
	$(ENV_PREFIX)black -l 79 --check tests/
	$(ENV_PREFIX)mypy --ignore-missing-imports ${1:dir}/
endsnippet


snippet PYTHON_VIRTUALENV
.PHONY: virtualenv
virtualenv:       ## Create a virtual environment.
	@if [ "$(USING_POETRY)" ]; then poetry install && exit; fi
	@echo "creating virtualenv ..."
	@rm -rf .venv
	@python3 -m venv .venv
	@./.venv/bin/pip install -U pip
	@./.venv/bin/pip install -e .[test]
	@echo
	@echo "!!! Please run 'source .venv/bin/activate' to enable the environment !!!"
endsnippet
